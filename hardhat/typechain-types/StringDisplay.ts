/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StringDisplayInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "display()": FunctionFragment;
    "setMockString(string)": FunctionFragment;
    "setOpsProxy(address)": FunctionFragment;
    "setString(string)": FunctionFragment;
    "toggleChange()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "display"
      | "setMockString"
      | "setOpsProxy"
      | "setString"
      | "toggleChange"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(functionFragment: "display", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMockString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpsProxy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleChange",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "display", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMockString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setString", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleChange",
    data: BytesLike
  ): Result;

  events: {
    "NewString()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewString"): EventFragment;
}

export interface NewStringEventObject {}
export type NewStringEvent = TypedEvent<[], NewStringEventObject>;

export type NewStringEventFilter = TypedEventFilter<NewStringEvent>;

export interface StringDisplay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StringDisplayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    display(overrides?: CallOverrides): Promise<[string]>;

    setMockString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOpsProxy(
      _opsProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  display(overrides?: CallOverrides): Promise<string>;

  setMockString(
    _string: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOpsProxy(
    _opsProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setString(
    _string: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleChange(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    display(overrides?: CallOverrides): Promise<string>;

    setMockString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpsProxy(
      _opsProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleChange(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewString()"(): NewStringEventFilter;
    NewString(): NewStringEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    display(overrides?: CallOverrides): Promise<BigNumber>;

    setMockString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOpsProxy(
      _opsProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    display(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMockString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOpsProxy(
      _opsProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setString(
      _string: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
